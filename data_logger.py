"""
Build Mart Data Logger
======================

This module provides a basic framework for converting raw log files
generated by the Build Mart instrumentation plugin into a relational
database. The instrumentation plugin should write one JSON object per
line, where each object contains information about a single event (e.g.
chat message, block placement, resource pickup). Fields are flexible but
must include a ``type`` key specifying the event category and a
``timestamp`` in ISO‑8601 format.

Example log line::

    {"timestamp": "2025-07-30T12:34:56.789Z", "type": "chat", "player": "Alice", "message": "We need more oak logs!"}

The script creates an SQLite database with a generic ``events`` table
containing columns for the common keys timestamp, type and payload. The
full JSON event is stored as text in the ``payload`` column for
flexibility. Analysts can later normalise or query the payload as
needed.
"""

from __future__ import annotations

import argparse
import json
import sqlite3
from pathlib import Path


def init_db(conn: sqlite3.Connection) -> None:
    """Create the events table if it doesn't already exist."""
    conn.execute(
        """
        CREATE TABLE IF NOT EXISTS events (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT NOT NULL,
            type TEXT NOT NULL,
            payload TEXT NOT NULL
        )
        """
    )
    conn.commit()


def ingest_log_file(conn: sqlite3.Connection, log_path: Path) -> None:
    """Read a log file and insert its events into the database."""
    with log_path.open("r", encoding="utf-8") as f:
        for line_no, line in enumerate(f, start=1):
            line = line.strip()
            if not line:
                continue
            try:
                event = json.loads(line)
            except json.JSONDecodeError as e:
                print(f"Skipping malformed line {line_no}: {e}")
                continue

            timestamp = event.get("timestamp")
            event_type = event.get("type", "unknown")
            payload = json.dumps(event, separators=(",", ":"))

            conn.execute(
                "INSERT INTO events (timestamp, type, payload) VALUES (?, ?, ?)",
                (timestamp, event_type, payload),
            )
        conn.commit()


def main() -> None:
    parser = argparse.ArgumentParser(description="Ingest Build Mart log files into SQLite.")
    parser.add_argument("logfile", type=Path, help="Path to the JSON log file")
    parser.add_argument(
        "--db", type=Path, default=Path("buildmart.db"), help="SQLite database file (default: buildmart.db)"
    )
    args = parser.parse_args()

    conn = sqlite3.connect(args.db)
    init_db(conn)
    ingest_log_file(conn, args.logfile)
    print(f"Ingested logs from {args.logfile} into {args.db}")


if __name__ == "__main__":
    main()